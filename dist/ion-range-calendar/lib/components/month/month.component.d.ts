import { AfterViewInit, ChangeDetectorRef, Provider } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IonRangeCalendarService } from '../../services/ion-range-calendar.service';
import { CalendarDay, CalendarMonth, ControlValueType, PickMode } from '../../calendar.types';
import * as i0 from "@angular/core";
export declare const MONTH_VALUE_ACCESSOR: Provider;
export declare class MonthComponent implements ControlValueAccessor, AfterViewInit {
    readonly componentMode: import("@angular/core").InputSignal<boolean>;
    readonly month: import("@angular/core").InputSignal<CalendarMonth>;
    readonly pickMode: import("@angular/core").InputSignal<PickMode>;
    readonly readonly: import("@angular/core").InputSignal<boolean>;
    readonly color: import("@angular/core").InputSignal<string>;
    ionChange: import("@angular/core").OutputEmitterRef<CalendarDay[]>;
    select: import("@angular/core").OutputEmitterRef<CalendarDay>;
    selectStart: import("@angular/core").OutputEmitterRef<CalendarDay>;
    selectEnd: import("@angular/core").OutputEmitterRef<CalendarDay>;
    _date: (CalendarDay | null)[];
    _isInit: boolean;
    _onChanged: (event: ControlValueType) => void;
    _onTouched: (event: ControlValueType) => void;
    readonly DAY_DATE_FORMAT = "MMMM dd, yyyy";
    get _isRange(): boolean;
    ref: ChangeDetectorRef;
    service: IonRangeCalendarService;
    ngAfterViewInit(): void;
    get value(): CalendarDay[];
    writeValue(obj: CalendarDay[]): void;
    registerOnChange(fn: (event: ControlValueType) => void): void;
    registerOnTouched(fn: (event: ControlValueType) => void): void;
    isEndSelection(day: CalendarDay): boolean;
    getDayLabel(day: CalendarDay): Date;
    isBetween(day: CalendarDay): boolean;
    isStartSelection(day: CalendarDay): boolean;
    isSelected(time: number): boolean;
    isSlotStart(day: CalendarDay): boolean;
    isSlotEnd(day: CalendarDay): boolean;
    isSlotBetween(day: CalendarDay): boolean;
    onSelected(item: CalendarDay): void;
    private adjustStart;
    private adjustEnd;
    static ɵfac: i0.ɵɵFactoryDeclaration<MonthComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MonthComponent, "ion-range-calendar-month", never, { "componentMode": { "alias": "componentMode"; "required": false; "isSignal": true; }; "month": { "alias": "month"; "required": false; "isSignal": true; }; "pickMode": { "alias": "pickMode"; "required": false; "isSignal": true; }; "readonly": { "alias": "readonly"; "required": false; "isSignal": true; }; "color": { "alias": "color"; "required": false; "isSignal": true; }; }, { "ionChange": "ionChange"; "select": "select"; "selectStart": "selectStart"; "selectEnd": "selectEnd"; }, never, never, true, never>;
}
