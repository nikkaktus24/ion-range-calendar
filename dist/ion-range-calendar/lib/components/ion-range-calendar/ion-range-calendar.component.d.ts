import { OnInit, Provider } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { CalendarComponentMonthChange, CalendarComponentOptions, CalendarComponentPayloadTypes, CalendarComponentTypeProperty, CalendarDay, CalendarModalOptions, CalendarMonth, ControlValueType } from '../../calendar.types';
import { IonRangeCalendarService } from '../../services/ion-range-calendar.service';
import * as i0 from "@angular/core";
export declare const ION_CAL_VALUE_ACCESSOR: Provider;
interface CompatibleIcons {
    caretDown: string;
    caretUp: string;
    chevronBack: string;
    chevronForward: string;
}
export type ionChange = CalendarComponentPayloadTypes | {
    from?: CalendarComponentPayloadTypes;
    to?: CalendarComponentPayloadTypes;
} | CalendarComponentPayloadTypes[];
export declare class IonRangeCalendarComponent implements ControlValueAccessor, OnInit {
    readonly format: import("@angular/core").InputSignal<string>;
    readonly type: import("@angular/core").InputSignal<CalendarComponentTypeProperty>;
    readonly readonly: import("@angular/core").InputSignal<boolean>;
    options: import("@angular/core").InputSignalWithTransform<CalendarComponentOptions, CalendarComponentOptions>;
    _d: CalendarModalOptions;
    _options: CalendarComponentOptions;
    _view: 'month' | 'days';
    _calendarMonthValue: CalendarDay[];
    _showToggleButtons: boolean;
    _compatibleIcons: CompatibleIcons;
    get showToggleButtons(): boolean;
    set showToggleButtons(value: boolean);
    _showMonthPicker: boolean;
    get showMonthPicker(): boolean;
    set showMonthPicker(value: boolean);
    monthOpt: CalendarMonth;
    ionChange: import("@angular/core").OutputEmitterRef<ionChange>;
    monthChange: import("@angular/core").OutputEmitterRef<CalendarComponentMonthChange>;
    select: import("@angular/core").OutputEmitterRef<CalendarDay>;
    selectStart: import("@angular/core").OutputEmitterRef<CalendarDay>;
    selectEnd: import("@angular/core").OutputEmitterRef<CalendarDay>;
    readonly MONTH_DATE_FORMAT = "MMMM yyyy";
    readonly calendarService: IonRangeCalendarService;
    _onChanged: (event: ControlValueType) => void;
    _onTouched: (event: ControlValueType) => void;
    constructor();
    ngOnInit(): void;
    getViewDate(): CalendarComponentPayloadTypes;
    getDate(date: number): Date;
    setViewDate(value: CalendarComponentPayloadTypes): void;
    switchView(): void;
    prev(): void;
    next(): void;
    prevYear(): void;
    nextYear(): void;
    nextMonth(): void;
    canNext(): boolean;
    backMonth(): void;
    canBack(): boolean;
    monthOnSelect(month: number): void;
    onChanged($event: CalendarDay[]): void;
    private handleSingleChange;
    private handleRangeChange;
    private handleSlotsChange;
    private handleMultiChange;
    swipeEvent($event: Event): void;
    _payloadToTimeNumber(value: CalendarComponentPayloadTypes): number;
    _monthFormat(date: number): string;
    private initOpt;
    createMonth(date: number): CalendarMonth;
    _createCalendarDay(value?: CalendarComponentPayloadTypes | null): CalendarDay | null;
    _handleType(value: number): CalendarComponentPayloadTypes;
    writeValue(obj: ControlValueType): void;
    registerOnChange(fn: (event: ControlValueType) => void): void;
    registerOnTouched(fn: (event: ControlValueType) => void): void;
    _writeValue(value: ControlValueType): void;
    private setOptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<IonRangeCalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IonRangeCalendarComponent, "ion-range-calendar", never, { "format": { "alias": "format"; "required": false; "isSignal": true; }; "type": { "alias": "type"; "required": false; "isSignal": true; }; "readonly": { "alias": "readonly"; "required": false; "isSignal": true; }; "options": { "alias": "options"; "required": false; "isSignal": true; }; }, { "ionChange": "ionChange"; "monthChange": "monthChange"; "select": "select"; "selectStart": "selectStart"; "selectEnd": "selectEnd"; }, never, never, true, never>;
}
export {};
